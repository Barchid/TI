import ij.process.*; // Pour classe Float Processor
import java.awt.Rectangle;

abstract public class DCT2D {

	// ---------------------------------------------------------------------------------
	/**
	 * Transformation DCT 2D directe (méthode de classe) utilisant la séparabilité
	 * 
	 * @param fp Signal 2D d'entrée et de sortie (MxN) (FloatProcessor)
	 */
	public static void forwardDCT(FloatProcessor fp) {
		// Traiter les lignes
		for (int y = 0; y < fp.getHeight(); y++) {
			double[] line = fp.getLine(0, y, fp.getWidth(), y);
			double[] lineDCT = DCT1D.forwardDCT(line);
			for (int x = 0; x < lineDCT.length; x++) {
				fp.putPixelValue(x, y, lineDCT[x]);
			}
		}

		// Traiter les colonnes de l'image résultant du traitement des lignes
		for (int x = 0; x < fp.getWidth(); x++) {
			double[] col = fp.getLine(x, 0, x, fp.getHeight());
			double[] colDCT = DCT1D.forwardDCT(col);
			for (int y = 0; y < colDCT.length; y++) {
				fp.putPixelValue(x, y, colDCT[y]);
			}
		}
	}

	// ---------------------------------------------------------------------------------
	/**
	 * Transformation DCT 2D inverse (méthode de classe)
	 * 
	 * @param fp Signal 2D d'entrée et de sortie (FloatProcessor)
	 */
	public static void inverseDCT(FloatProcessor fp) {
		// Traiter les lignes
		for (int y = 0; y < fp.getHeight(); y++) {
			double[] lineDCT = fp.getLine(0, y, fp.getWidth(), y);
			double[] line = DCT1D.inverseDCT(lineDCT);
			for (int x = 0; x < line.length; x++) {
				fp.putPixelValue(x, y, line[x]);
			}
		}

		// Traiter les colonnes de l'image résultant du traitement des lignes
		for (int x = 0; x < fp.getWidth(); x++) {
			double[] colDCT = fp.getLine(x, 0, x, fp.getHeight());
			double[] col = DCT1D.inverseDCT(colDCT);
			for (int y = 0; y < col.length; y++) {
				fp.putPixelValue(x, y, col[y]);
			}
		}

		fp.add(128);
	}
}